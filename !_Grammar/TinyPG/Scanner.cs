// Generated by TinyPG v1.3 available at www.codeproject.com

using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using System.Xml.Serialization;

namespace Sharpen.Core.Parser
{
    #region Scanner

    public partial class Scanner
    {
        public string Input;
        public int StartPos = 0;
        public int EndPos = 0;
        public int CurrentLine;
        public int CurrentColumn;
        public int CurrentPosition;
        public List<Token> Skipped; // tokens that were skipped
        public Dictionary<TokenType, Regex> Patterns;

        private Token LookAheadToken;
        private List<TokenType> Tokens;
        private List<TokenType> SkipList; // tokens to be skipped

        public Scanner()
        {
            Regex regex;
            Patterns = new Dictionary<TokenType, Regex>();
            Tokens = new List<TokenType>();
            LookAheadToken = null;
            Skipped = new List<Token>();

            SkipList = new List<TokenType>();
            SkipList.Add(TokenType.WHITESPACE);
            SkipList.Add(TokenType.COMMENTLINE);

            regex = new Regex(@"[0-9]+", RegexOptions.Compiled);
            Patterns.Add(TokenType.INTEGER, regex);
            Tokens.Add(TokenType.INTEGER);

            regex = new Regex(@"[0-9]*\.[0-9]+", RegexOptions.Compiled);
            Patterns.Add(TokenType.DOUBLE, regex);
            Tokens.Add(TokenType.DOUBLE);

            regex = new Regex(@"(?![\s\$\^])""?[^\[\]\(\)\{\}\;]+""?", RegexOptions.Compiled);
            Patterns.Add(TokenType.STRING, regex);
            Tokens.Add(TokenType.STRING);

            regex = new Regex(@"^[^\^\$@#][^\^\$@{}#]+", RegexOptions.Compiled);
            Patterns.Add(TokenType.PLAIN, regex);
            Tokens.Add(TokenType.PLAIN);

            regex = new Regex(@"true|false", RegexOptions.Compiled);
            Patterns.Add(TokenType.BOOLVALUE, regex);
            Tokens.Add(TokenType.BOOLVALUE);

            regex = new Regex(@"\(", RegexOptions.Compiled);
            Patterns.Add(TokenType.PARENOPEN, regex);
            Tokens.Add(TokenType.PARENOPEN);

            regex = new Regex(@"\)", RegexOptions.Compiled);
            Patterns.Add(TokenType.PARENCLOSE, regex);
            Tokens.Add(TokenType.PARENCLOSE);

            regex = new Regex(@"\[", RegexOptions.Compiled);
            Patterns.Add(TokenType.BRACKETOPEN, regex);
            Tokens.Add(TokenType.BRACKETOPEN);

            regex = new Regex(@"\]", RegexOptions.Compiled);
            Patterns.Add(TokenType.BRACKETCLOSE, regex);
            Tokens.Add(TokenType.BRACKETCLOSE);

            regex = new Regex(@"\{", RegexOptions.Compiled);
            Patterns.Add(TokenType.CURLYOPEN, regex);
            Tokens.Add(TokenType.CURLYOPEN);

            regex = new Regex(@"\}", RegexOptions.Compiled);
            Patterns.Add(TokenType.CURLYCLOSE, regex);
            Tokens.Add(TokenType.CURLYCLOSE);

            regex = new Regex(@";", RegexOptions.Compiled);
            Patterns.Add(TokenType.SC, regex);
            Tokens.Add(TokenType.SC);

            regex = new Regex(@",", RegexOptions.Compiled);
            Patterns.Add(TokenType.COMMA, regex);
            Tokens.Add(TokenType.COMMA);

            regex = new Regex(@":", RegexOptions.Compiled);
            Patterns.Add(TokenType.C, regex);
            Tokens.Add(TokenType.C);

            regex = new Regex(@"::", RegexOptions.Compiled);
            Patterns.Add(TokenType.CC, regex);
            Tokens.Add(TokenType.CC);

            regex = new Regex(@"\.", RegexOptions.Compiled);
            Patterns.Add(TokenType.DOT, regex);
            Tokens.Add(TokenType.DOT);

            regex = new Regex(@"%", RegexOptions.Compiled);
            Patterns.Add(TokenType.PERCENT, regex);
            Tokens.Add(TokenType.PERCENT);

            regex = new Regex(@"\+", RegexOptions.Compiled);
            Patterns.Add(TokenType.PLUS, regex);
            Tokens.Add(TokenType.PLUS);

            regex = new Regex(@"-", RegexOptions.Compiled);
            Patterns.Add(TokenType.MINUS, regex);
            Tokens.Add(TokenType.MINUS);

            regex = new Regex(@"\/", RegexOptions.Compiled);
            Patterns.Add(TokenType.DIV, regex);
            Tokens.Add(TokenType.DIV);

            regex = new Regex(@"\*", RegexOptions.Compiled);
            Patterns.Add(TokenType.MUL, regex);
            Tokens.Add(TokenType.MUL);

            regex = new Regex(@"(?!\^|\.|\$\.|BASE|CLASS|OPTIONS|USE|eval|for|if|while|true|false)[a-zA-Z_][a-zA-Z0-9_]*", RegexOptions.Compiled);
            Patterns.Add(TokenType.IDENTIFIER, regex);
            Tokens.Add(TokenType.IDENTIFIER);

            regex = new Regex(@"(?<=\$\.)[a-zA-Z_][a-zA-Z0-9_]*", RegexOptions.Compiled);
            Patterns.Add(TokenType.HASHKEY, regex);
            Tokens.Add(TokenType.HASHKEY);

            regex = new Regex(@"\^", RegexOptions.Compiled);
            Patterns.Add(TokenType.CF, regex);
            Tokens.Add(TokenType.CF);

            regex = new Regex(@"\$", RegexOptions.Compiled);
            Patterns.Add(TokenType.DOL, regex);
            Tokens.Add(TokenType.DOL);

            regex = new Regex(@"\$\.", RegexOptions.Compiled);
            Patterns.Add(TokenType.DOLDOT, regex);
            Tokens.Add(TokenType.DOLDOT);

            regex = new Regex(@"@", RegexOptions.Compiled);
            Patterns.Add(TokenType.AT, regex);
            Tokens.Add(TokenType.AT);

            regex = new Regex(@"\n", RegexOptions.Compiled);
            Patterns.Add(TokenType.NL, regex);
            Tokens.Add(TokenType.NL);

            regex = new Regex(@"&&", RegexOptions.Compiled);
            Patterns.Add(TokenType.AND, regex);
            Tokens.Add(TokenType.AND);

            regex = new Regex(@"||", RegexOptions.Compiled);
            Patterns.Add(TokenType.OR, regex);
            Tokens.Add(TokenType.OR);

            regex = new Regex(@"!", RegexOptions.Compiled);
            Patterns.Add(TokenType.NOT, regex);
            Tokens.Add(TokenType.NOT);

            regex = new Regex(@">", RegexOptions.Compiled);
            Patterns.Add(TokenType.GT, regex);
            Tokens.Add(TokenType.GT);

            regex = new Regex(@"<", RegexOptions.Compiled);
            Patterns.Add(TokenType.LT, regex);
            Tokens.Add(TokenType.LT);

            regex = new Regex(@"<=", RegexOptions.Compiled);
            Patterns.Add(TokenType.LEQ, regex);
            Tokens.Add(TokenType.LEQ);

            regex = new Regex(@">=", RegexOptions.Compiled);
            Patterns.Add(TokenType.GEQ, regex);
            Tokens.Add(TokenType.GEQ);

            regex = new Regex(@"!=", RegexOptions.Compiled);
            Patterns.Add(TokenType.NE, regex);
            Tokens.Add(TokenType.NE);

            regex = new Regex(@"=", RegexOptions.Compiled);
            Patterns.Add(TokenType.EQ, regex);
            Tokens.Add(TokenType.EQ);

            regex = new Regex(@"ne", RegexOptions.Compiled);
            Patterns.Add(TokenType.SNE, regex);
            Tokens.Add(TokenType.SNE);

            regex = new Regex(@"eq", RegexOptions.Compiled);
            Patterns.Add(TokenType.SEQ, regex);
            Tokens.Add(TokenType.SEQ);

            regex = new Regex(@"gt", RegexOptions.Compiled);
            Patterns.Add(TokenType.SGT, regex);
            Tokens.Add(TokenType.SGT);

            regex = new Regex(@"lt", RegexOptions.Compiled);
            Patterns.Add(TokenType.SLT, regex);
            Tokens.Add(TokenType.SLT);

            regex = new Regex(@"^$", RegexOptions.Compiled);
            Patterns.Add(TokenType.EOF, regex);
            Tokens.Add(TokenType.EOF);

            regex = new Regex(@"\s+", RegexOptions.Compiled);
            Patterns.Add(TokenType.WHITESPACE, regex);
            Tokens.Add(TokenType.WHITESPACE);

            regex = new Regex(@"#[^\n]*\n?", RegexOptions.Compiled);
            Patterns.Add(TokenType.COMMENTLINE, regex);
            Tokens.Add(TokenType.COMMENTLINE);

            regex = new Regex(@"while", RegexOptions.Compiled);
            Patterns.Add(TokenType.WHILE, regex);
            Tokens.Add(TokenType.WHILE);

            regex = new Regex(@"for", RegexOptions.Compiled);
            Patterns.Add(TokenType.FOR, regex);
            Tokens.Add(TokenType.FOR);

            regex = new Regex(@"if", RegexOptions.Compiled);
            Patterns.Add(TokenType.IF, regex);
            Tokens.Add(TokenType.IF);

            regex = new Regex(@"USE", RegexOptions.Compiled);
            Patterns.Add(TokenType.USE, regex);
            Tokens.Add(TokenType.USE);

            regex = new Regex(@"CLASS", RegexOptions.Compiled);
            Patterns.Add(TokenType.CLASS, regex);
            Tokens.Add(TokenType.CLASS);

            regex = new Regex(@"BASE", RegexOptions.Compiled);
            Patterns.Add(TokenType.BASE, regex);
            Tokens.Add(TokenType.BASE);

            regex = new Regex(@"OPTIONS", RegexOptions.Compiled);
            Patterns.Add(TokenType.OPTIONS, regex);
            Tokens.Add(TokenType.OPTIONS);

            regex = new Regex(@"def", RegexOptions.Compiled);
            Patterns.Add(TokenType.DEF, regex);
            Tokens.Add(TokenType.DEF);

            regex = new Regex(@"is", RegexOptions.Compiled);
            Patterns.Add(TokenType.IS, regex);
            Tokens.Add(TokenType.IS);

            regex = new Regex(@"in", RegexOptions.Compiled);
            Patterns.Add(TokenType.IN, regex);
            Tokens.Add(TokenType.IN);

            regex = new Regex(@"-f", RegexOptions.Compiled);
            Patterns.Add(TokenType.FILEEXISTS, regex);
            Tokens.Add(TokenType.FILEEXISTS);

            regex = new Regex(@"-d", RegexOptions.Compiled);
            Patterns.Add(TokenType.DIRECTORYEXISTS, regex);
            Tokens.Add(TokenType.DIRECTORYEXISTS);

            regex = new Regex(@"eval", RegexOptions.Compiled);
            Patterns.Add(TokenType.EVAL, regex);
            Tokens.Add(TokenType.EVAL);


        }

        public void Init(string input)
        {
            this.Input = input;
            StartPos = 0;
            EndPos = 0;
            CurrentLine = 0;
            CurrentColumn = 0;
            CurrentPosition = 0;
            LookAheadToken = null;
        }

        public Token GetToken(TokenType type)
        {
            Token t = new Token(this.StartPos, this.EndPos);
            t.Type = type;
            return t;
        }

         /// <summary>
        /// executes a lookahead of the next token
        /// and will advance the scan on the input string
        /// </summary>
        /// <returns></returns>
        public Token Scan(params TokenType[] expectedtokens)
        {
            Token tok = LookAhead(expectedtokens); // temporarely retrieve the lookahead
            LookAheadToken = null; // reset lookahead token, so scanning will continue
            StartPos = tok.EndPos;
            EndPos = tok.EndPos; // set the tokenizer to the new scan position
            return tok;
        }

        /// <summary>
        /// returns token with longest best match
        /// </summary>
        /// <returns></returns>
        public Token LookAhead(params TokenType[] expectedtokens)
        {
            int i;
            int startpos = StartPos;
            Token tok = null;
            List<TokenType> scantokens;


            // this prevents double scanning and matching
            // increased performance
            if (LookAheadToken != null 
                && LookAheadToken.Type != TokenType._UNDETERMINED_ 
                && LookAheadToken.Type != TokenType._NONE_) return LookAheadToken;

            // if no scantokens specified, then scan for all of them (= backward compatible)
            if (expectedtokens.Length == 0)
                scantokens = Tokens;
            else
            {
                scantokens = new List<TokenType>(expectedtokens);
                scantokens.AddRange(SkipList);
            }

            do
            {

                int len = -1;
                TokenType index = (TokenType)int.MaxValue;
                string input = Input.Substring(startpos);

                tok = new Token(startpos, EndPos);

                for (i = 0; i < scantokens.Count; i++)
                {
                    Regex r = Patterns[scantokens[i]];
                    Match m = r.Match(input);
                    if (m.Success && m.Index == 0 && ((m.Length > len) || (scantokens[i] < index && m.Length == len )))
                    {
                        len = m.Length;
                        index = scantokens[i];  
                    }
                }

                if (index >= 0 && len >= 0)
                {
                    tok.EndPos = startpos + len;
                    tok.Text = Input.Substring(tok.StartPos, len);
                    tok.Type = index;
                }
                else if (tok.StartPos < tok.EndPos - 1)
                {
                    tok.Text = Input.Substring(tok.StartPos, 1);
                }

                if (SkipList.Contains(tok.Type))
                {
                    startpos = tok.EndPos;
                    Skipped.Add(tok);
                }
                else
                {
                    // only assign to non-skipped tokens
                    tok.Skipped = Skipped; // assign prior skips to this token
                    Skipped = new List<Token>(); //reset skips
                }
            }
            while (SkipList.Contains(tok.Type));

            LookAheadToken = tok;
            return tok;
        }
    }

    #endregion

    #region Token

    public enum TokenType
    {

            //Non terminal tokens:
            _NONE_  = 0,
            _UNDETERMINED_= 1,

            //Non terminal tokens:
            Start   = 2,
            UseDirective= 3,
            ClassDirective= 4,
            BaseDirective= 5,
            OptionsDirective= 6,
            Variable= 7,
            FieldName= 8,
            Literal = 9,
            FunctionDefinition= 10,
            FunctionName= 11,
            LocalVariables= 12,
            Body    = 13,
            Call    = 14,
            Function= 15,
            FullFunctionName= 16,
            StaticPrefix= 17,
            InstancePrefix= 18,
            ConstructorPrefix= 19,
            EvalConstruct= 20,
            EvalBody= 21,
            FormatString= 22,
            WhileCycle= 23,
            WhileCondition= 24,
            WhileBody= 25,
            CycleSeparator= 26,
            BoolCondition= 27,
            ForCycle= 28,
            ForCounter= 29,
            ForFrom = 30,
            ForTo   = 31,
            ForBody = 32,
            IfCondition= 33,
            IfTrueBranch= 34,
            IfFalseBranch= 35,
            Assignment= 36,
            AssignmentBody= 37,
            MathOp  = 38,
            HashAssignment= 39,
            Key     = 40,
            VariablesDefinitions= 41,
            ParamsDefinitions= 42,
            Params  = 43,
            Param   = 44,

            //Terminal tokens:
            INTEGER = 45,
            DOUBLE  = 46,
            STRING  = 47,
            PLAIN   = 48,
            BOOLVALUE= 49,
            PARENOPEN= 50,
            PARENCLOSE= 51,
            BRACKETOPEN= 52,
            BRACKETCLOSE= 53,
            CURLYOPEN= 54,
            CURLYCLOSE= 55,
            SC      = 56,
            COMMA   = 57,
            C       = 58,
            CC      = 59,
            DOT     = 60,
            PERCENT = 61,
            PLUS    = 62,
            MINUS   = 63,
            DIV     = 64,
            MUL     = 65,
            IDENTIFIER= 66,
            HASHKEY = 67,
            CF      = 68,
            DOL     = 69,
            DOLDOT  = 70,
            AT      = 71,
            NL      = 72,
            AND     = 73,
            OR      = 74,
            NOT     = 75,
            GT      = 76,
            LT      = 77,
            LEQ     = 78,
            GEQ     = 79,
            NE      = 80,
            EQ      = 81,
            SNE     = 82,
            SEQ     = 83,
            SGT     = 84,
            SLT     = 85,
            EOF     = 86,
            WHITESPACE= 87,
            COMMENTLINE= 88,
            WHILE   = 89,
            FOR     = 90,
            IF      = 91,
            USE     = 92,
            CLASS   = 93,
            BASE    = 94,
            OPTIONS = 95,
            DEF     = 96,
            IS      = 97,
            IN      = 98,
            FILEEXISTS= 99,
            DIRECTORYEXISTS= 100,
            EVAL    = 101
    }

    public class Token
    {
        private int startpos;
        private int endpos;
        private string text;
        private object value;

        // contains all prior skipped symbols
        private List<Token> skipped;

        public int StartPos { 
            get { return startpos;} 
            set { startpos = value; }
        }

        public int Length { 
            get { return endpos - startpos;} 
        }

        public int EndPos { 
            get { return endpos;} 
            set { endpos = value; }
        }

        public string Text { 
            get { return text;} 
            set { text = value; }
        }

        public List<Token> Skipped { 
            get { return skipped;} 
            set { skipped = value; }
        }
        public object Value { 
            get { return value;} 
            set { this.value = value; }
        }

        [XmlAttribute]
        public TokenType Type;

        public Token()
            : this(0, 0)
        {
        }

        public Token(int start, int end)
        {
            Type = TokenType._UNDETERMINED_;
            startpos = start;
            endpos = end;
            Text = ""; // must initialize with empty string, may cause null reference exceptions otherwise
            Value = null;
        }

        public void UpdateRange(Token token)
        {
            if (token.StartPos < startpos) startpos = token.StartPos;
            if (token.EndPos > endpos) endpos = token.EndPos;
        }

        public override string ToString()
        {
            if (Text != null)
                return Type.ToString() + " '" + Text + "'";
            else
                return Type.ToString();
        }
    }

    #endregion
}
